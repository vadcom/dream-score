/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.50).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.poleray.api;

import io.poleray.model.Score;
import io.poleray.model.Section;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-11-17T13:56:19.196670531Z[GMT]")
@Validated
public interface AppApi {

    @Operation(summary = "", description = "Get top <count> records", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/{app}/{section}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Score>> appSectionGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("app") String app,
                                              @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("section") String section,
                                              @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "100" }, defaultValue="1")) @Valid @RequestParam(value = "positionToSkip", required = false, defaultValue="0") Integer positionToSkip,
                                              @Max(100) @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "100" }, maximum="100", defaultValue="10")) @Valid @RequestParam(value = "count", required = false, defaultValue="10") Integer count,
                                              @Parameter(in = ParameterIn.QUERY, description = "Device Identificator for local score", name = "deviceId")  String deviceId);


    @Operation(summary = "", description = "Get score around record with ID", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/{app}/{section}/id/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Score>> getRecordsAroundId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("app") String app,
                                                   @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("section") String section,
                                                   @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema(allowableValues={ "123456" })) @PathVariable("id") String id,
                                                   @Max(100) @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "count", required = false, defaultValue="10") Integer count,
                                                   @Parameter(in = ParameterIn.QUERY, description = "Device Identificator for local score", name = "deviceId", required=false)  String deviceId);


    @Operation(summary = "", description = "Get recods with score for user", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/{app}/{section}/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Score>> appSectionUserGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("app") String app,
                                                  @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("section") String section,
                                                  @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "user", required = false) String user,
                                                  @Parameter(in = ParameterIn.QUERY, description = "Get records after this ID" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) String id,
                                                  @Max(100) @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema(allowableValues={ "100" }, maximum="100")) @Valid @RequestParam(value = "count", required = false) Integer count,
                                                  @Parameter(in = ParameterIn.QUERY, description = "Device Identificator for local score", name = "deviceId")  String deviceId);


    @Operation(summary = "", description = "Get list of section for app", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Section.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid status value") })
    @RequestMapping(value = "/{app}/sections",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Section>> appSectionsGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("app") String app);


    @Operation(summary = "Add a new score to the store", description = "Add a new score to the store", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Score.class)))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/{app}/{section}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Score>> newScore(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("app") String app,
                                         @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("section") String section,
                                         @Parameter(in = ParameterIn.DEFAULT, description = "Create a new score in the store", required=true, schema=@Schema()) @Valid @RequestBody Score body);

}

